# -*- coding: utf-8 -*-
"""Text_Implicit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zOo2LSv0xyJzt1X3hpJvtzVnX0W5xeaS
"""

wordlen = max(df['word_count'])
print(wordlen)

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.14

#importing libraries

from numpy import array
from numpy import asarray
from numpy import zeros
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Flatten, BatchNormalization
from keras.layers import Embedding, Dropout, Conv1D, MaxPooling1D
import pandas as pd
from sklearn.model_selection import train_test_split


#Loading the data in a dataframe



df = pd.read_csv('drive/My Drive/The_Research/all_data_refined.csv')
docs = df['text'] #Change this accordingly


#test

for i in range(len(docs)):
  if docs[i] == "": print(i)

#load the labels


type = df['type'] #Change this accordingly
labels = []

for types in type:
  if types == 'real':
    labels.append(1)
  elif types == 'fake':
    labels.append(0)


print(docs)

# prepare tokenizer
t = Tokenizer()
t.fit_on_texts(docs)
vocab_size = len(t.word_index) + 1



# integer encode the documents
encoded_docs = t.texts_to_sequences(docs)
print(encoded_docs)


# pad documents to a max length




wordlen = max(df['word_count'])
print(wordlen)





max_length = wordlen # Change this if needed
print("Max_Length: ", max_length)
padded_docs = pad_sequences(encoded_docs, maxlen=max_length, padding='post')
print(padded_docs)


# load the whole embedding into memory
embeddings_index = dict()
f = open('drive/My Drive/glove_data/glove.6B/glove.6B.100d.txt')
for line in f:
	values = line.split()
	word = values[0]
	coefs = asarray(values[1:], dtype='float32')
	embeddings_index[word] = coefs
f.close()
print('Loaded %s word vectors.' % len(embeddings_index))


# create a weight matrix for words in training docs
embedding_matrix = zeros((vocab_size, 100))
for word, i in t.word_index.items():
	embedding_vector = embeddings_index.get(word)
	if embedding_vector is not None:
		embedding_matrix[i] = embedding_vector


X_train, X_test, y_train, y_test = train_test_split(padded_docs, labels, test_size=0.33)

# define model
model = Sequential()
e = Embedding(vocab_size, 100, weights=[embedding_matrix], input_length=max_length, trainable=False)
model.add(e)
model.add(Dropout(0.5))
#model.add(e)
model.add(Conv1D(filters=10, kernel_size=(4)))
model.add(MaxPooling1D(pool_size=2))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.8))
model.add(Dense(1, activation='sigmoid'))


# compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])


# summarize the model
print("____________________")
print(model.summary())
print("____________________")


# fit the model
model.fit(X_train, y_train, epochs=5, verbose=1)


# evaluate the model
print("____________________")
loss, accuracy = model.evaluate(X_test, y_test, verbose=1)
print('Accuracy: %f' % (accuracy*100))


print("____________________")
output = model.predict(X_test)
print(output)

# save the model
model.save('modelword2vec.h5')

df[:5653]



