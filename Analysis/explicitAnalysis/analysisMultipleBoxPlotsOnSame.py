# -*- coding: utf-8 -*-
"""Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18CGvKGBDLoZm007lz3ohHJ9T3lqvLotE
"""

from google.colab import drive
drive.mount('/content/drive')

import seaborn as sns

test_df = pd.read_csv('drive/My Drive/The_Research/all_data_refined.csv', encoding='utf-8')
df = test_df

df['word_count'] = ((df['word_count']- min(df['word_count']))/(max(df['word_count']) - min(df['word_count'])))
df['exclamation_count'] = ((df['exclamation_count']- min(df['exclamation_count']))/(max(df['exclamation_count']) - min(df['exclamation_count'])))
df['average_word_count'] = ((df['average_word_count']- min(df['average_word_count']))/(max(df['average_word_count']) - min(df['average_word_count'])))
df['capital_count'] = ((df['capital_count']- min(df['capital_count']))/(max(df['capital_count']) - min(df['capital_count'])))
df['question_count'] = ((df['question_count']- min(df['question_count']))/(max(df['question_count']) - min(df['question_count'])))
df['negation_count'] = ((df['negation_count']- min(df['negation_count']))/(max(df['negation_count']) - min(df['negation_count'])))
df['fpp_count'] = ((df['fpp_count']- min(df['fpp_count']))/(max(df['fpp_count']) - min(df['fpp_count'])))
df['id'] = ((df['id']- min(df['id']))/(max(df['id']) - min(df['id'])))

df = df.filter(['type', 'word_count', 'exclamation_count', 'average_word_count', 'capital_count', 'question_count', 'negation_count', 'fpp_count'])

df.head()

# Commented out IPython magic to ensure Python compatibility.
fake_df = df[df['type']=='fake']
real_df = df[df['type']=='real']


fake_desc = fake_df.describe()
real_desc = real_df.describe()

fake_desc.to_csv(r'drive/My Drive/The_Research/fake_desc.csv', index = False)
fake_desc.head()

#Description:

pd.set_option("display.max_columns", None)
print("FAKE NEWS ANALYSIS")
print(fake_desc)
print("REAL NEWS ANALYSIS")
print(real_desc)

# PLOTS:



# %matplotlib inline
sns.set(rc={'figure.figsize':(15,10)}, font_scale=1.5, style='whitegrid')


fig = sns.boxplot(x="type", y="fpp_count", data=df)
plt.savefig('fpp_count.png')

